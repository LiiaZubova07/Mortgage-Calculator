{"version":3,"sources":["model.js","view/updateResultsView.js","utils/updateModel.js","view/radioPrograms.js","view/utils.js","view/costInput.js","view/costRange.js","view/paymentInput.js","view/paymentRange.js","view/timeInput.js","view/timeRange.js","controller.js"],"names":["data","selectedProgram","cost","minPrice","maxPrice","minPaymentPercents","maxPaymentPercents","paymentPercents","payment","getMinPayment","getMaxPayment","minYear","maxYear","time","programs","base","it","gov","zero","results","rate","getData","getResults","setData","newData","console","log","onUpdate","id","maxpaymentPercents","minpaymentPercents","updateResultsView","document","querySelector","innerHTML","updateModel","element","dispatchEvent","CustomEvent","bubbles","detail","init","radioBtns","querySelectorAll","value","innerText","forEach","radioBtn","addEventListener","parseFloat","updateMinPercents","input","cleaveInput","Cleave","numeral","numeralThousandsGroupStyle","delimiter","setRawValue","getRawValue","closest","classList","add","remove","slider","noUiSlider","create","start","connect","tooltips","step","range","min","max","format","wNumb","decimals","thousand","suffix","on","sliderValue","get","split","parseInt","String","replace","window","onload","Model","cleaveCost","costInput","sliderCost","costRange","cleavePayment","paymentInput","sliderPayment","paymentRange","cleaveTime","timeInput","sliderTime","timeRange","e","updateOptions","set","updateFormAndSliders"],"mappings":"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","file":"controller.js","sourceRoot":"..\\js","sourcesContent":["let data = {\r\n  selectedProgram: 0.1,\r\n  cost: 12000000,\r\n  minPrice: 375000,\r\n  maxPrice: 100000000,\r\n  minPaymentPercents: 0.15,\r\n  maxPaymentPercents: 0.9,\r\n  paymentPercents: 0.5,\r\n  payment: 6000000,\r\n  getMinPayment: function () {\r\n    return this.cost * this.minPaymentPercents;\r\n  },\r\n  getMaxPayment: function () {\r\n    return this.cost * this.maxPaymentPercents;\r\n  },\r\n  minYear: 1,\r\n  maxYear: 30,\r\n  time: 10,\r\n  programs: {\r\n    base: 0.1,\r\n    it: 0.047,\r\n    gov: 0.067,\r\n    zero: 0.12,\r\n  },\r\n};\r\n\r\nlet results = {\r\n  rate: data.selectedProgram,\r\n};\r\n\r\nfunction getData() {\r\n  //возвр объект, куда деструктуризирую data\r\n  //чтобы передать в контроллер не ссылку на data, а его копию\r\n  return { ...data };\r\n}\r\nfunction getResults() {\r\n  //возвр объект, куда деструктуризирую data\r\n  //чтобы передать в контроллер не ссылку на data, а его копию\r\n  return { ...results };\r\n}\r\n\r\nfunction setData(newData) {\r\n  console.log('New Data', newData);\r\n\r\n  if (newData.onUpdate === 'radioProgram') {\r\n    if (newData.id === 'zero-value') {\r\n      data.minPaymentPercents = 0;\r\n    } else {\r\n      data.minPaymentPercents = 0.15;\r\n    }\r\n    //  data.minPaymentPercents = newData.id === 'zero-value' ? 0 : 0.15;\r\n  }\r\n\r\n  if (newData.onUpdate === 'inputCost' || newData.onUpdate === 'costSlider') {\r\n    //обновление цены\r\n    //если стоимость меньше мин цены\r\n    if (newData.cost < data.minPrice) newData.cost = data.minPrice;\r\n\r\n    //если стоимость больше макс цены\r\n    if (newData.cost > data.maxPrice) newData.cost = data.maxPrice;\r\n\r\n    //если новая стоимость меньше первоначальной\r\n    console.log(data.payment);\r\n    console.log(data.getMaxPayment());\r\n    if (data.payment > data.getMaxPayment()) {\r\n      console.log('here');\r\n      data.payment = data.getMaxPayment();\r\n    }\r\n\r\n    //если сумма первоначальной меньше, чем допустимый мин платёж\r\n    if (data.payment < data.getMinPayment()) {\r\n      data.payment = data.getMinPayment();\r\n    }\r\n\r\n//пересчитать новые проценты, если поменялась стоимость\r\ndata.paymentPercents = ( data.payment * 100) / newData.cost / 100;\r\n\r\n  }\r\n\r\n  if (newData.onUpdate === 'inputPayment') {\r\n    //пересчитываем проценты\r\n    newData.paymentPercents = (newData.payment * 100) / data.cost / 100;\r\n\r\n    //если проценты БОЛЬШЕ 90%\r\n    if (newData.paymentPercents > data.maxPaymentPercents) {\r\n      newData.paymentPercents = data.maxPaymentPercents;\r\n      newData.payment = data.cost * newData.maxpaymentPercents;\r\n    }\r\n    //если проценты МЕНЬШЕ 90%\r\n    if (newData.paymentPercents < data.minPaymentPercents) {\r\n      newData.paymentPercents = data.minPaymentPercents;\r\n      newData.payment = data.cost * newData.minpaymentPercents;\r\n    }\r\n  }\r\n\r\n  if (newData.onUpdate === 'paymentSlider') {\r\n    newData.paymentPercents = newData.paymentPercents / 100;\r\n    data.payment = data.cost * newData.paymentPercents;\r\n  }\r\n\r\n  if (newData.onUpdate === 'inputTime') {\r\n    if (newData.time > data.maxYear) {\r\n      newData.time = data.maxYear;\r\n    }\r\n    if (newData.time < data.minYear) {\r\n      newData.time = data.minYear;\r\n    }\r\n  }\r\n\r\n  data = {\r\n    ...data,\r\n    ...newData,\r\n  };\r\n\r\n  results = {\r\n    rate: data.selectedProgram,\r\n  };\r\n\r\n  console.log('Updated Data', data);\r\n  console.log('New Result', results);\r\n}\r\n\r\nexport { getData, setData, getResults };\r\n","function updateResultsView(results) {\r\n  document.querySelector('#total-percent').innerHTML = results.rate * 100 + '%';\r\n}\r\n\r\nexport default updateResultsView;\r\n","function updateModel(element, data) {\r\n  //генерация пользовательского события\r\n  element.dispatchEvent(\r\n    new CustomEvent('updateForm', {\r\n      bubbles: true,\r\n      detail: {\r\n        ...data,\r\n      },\r\n    })\r\n  );\r\n}\r\n\r\nexport default updateModel;\r\n","//код, который будет инициализировать ставки(ХХ)\r\n\r\nimport updateModel from './../utils/updateModel.js';\r\n\r\nfunction init(getData) {\r\n  const radioBtns = document.querySelectorAll('input[name = \"program\"]');\r\n\r\n  const { base, it, gov, zero } = getData().programs;\r\n\r\n  //Устанавливаю эти значения в радиокнопку\r\n  //Set program rates in radio buttons\r\n  document.querySelector('#base-value').value = base;\r\n  document.querySelector('#it-value').value = it;\r\n  document.querySelector('#gov-value').value = gov;\r\n  document.querySelector('#zero-value').value = zero;\r\n\r\n  //Show program rates on page\r\n  document.querySelector('#base-text').innerText = base * 100 + '%';\r\n  document.querySelector('#it-text').innerText = it * 100 + '%';\r\n  document.querySelector('#gov-text').innerText = gov * 100 + '%';\r\n  document.querySelector('#zero-text').innerText = zero * 100 + '%';\r\n\r\n  radioBtns.forEach(function (radioBtn) {\r\n    radioBtn.addEventListener('change', function () {\r\n      // console.log(this);\r\n      //преобразование в число\r\n      // console.log(parseFloat(parseFloat(this.value)));\r\n      // console.log(this.id);\r\n\r\n      updateModel(this, {\r\n        selectedProgram: parseFloat(this.value),\r\n        onUpdate: 'radioProgram',\r\n        id: this.id,\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nexport default init;\r\n","function updateMinPercents(data) {\r\n  document.querySelector('#percents-from').innerText =\r\n    data.minPaymentPercents * 100 + '%';\r\n}\r\n\r\nexport { updateMinPercents };\r\n","import updateModel from './../utils/updateModel.js';\r\n\r\nfunction init(getData) {\r\n  const data = getData();\r\n  //   console.log('FIRED');\r\n  const input = document.querySelector('#input-cost');\r\n\r\n  const settings = {\r\n    numeral: true,\r\n    numeralThousandsGroupStyle: 'thousand',\r\n    delimiter: ' ',\r\n  };\r\n\r\n  const cleaveInput = new Cleave(input, settings);\r\n  //установка стартового значения\r\n  cleaveInput.setRawValue(data.cost);\r\n\r\n  //прослушка на ввод стоимости\r\n  input.addEventListener('input', function () {\r\n    const value = +cleaveInput.getRawValue();\r\n\r\n    //проверка на минимальную и максимальную цену\r\n    if (value < data.minPrice || value > data.maxPrice) {\r\n      input.closest('.param__details').classList.add('param__details--error');\r\n    }\r\n\r\n    if (value >= data.minPrice && value <= data.maxPrice) {\r\n      input\r\n        .closest('.param__details')\r\n        .classList.remove('param__details--error');\r\n    }\r\n\r\n    //обновить модель\r\n    updateModel(input, {\r\n      cost: value,\r\n      onUpdate: 'inputCost',\r\n    });\r\n  });\r\n\r\n  //когда ввели маленькое число будет сбрасываться на минимально допустимое\r\n  input.addEventListener('change', function () {\r\n    const value = +cleaveInput.getRawValue();\r\n\r\n    if (value > data.maxPrice) {\r\n      input\r\n        .closest('.param__details')\r\n        .classList.remove('param__details--error');\r\n      cleaveInput.setRawValue(data.maxPrice);\r\n    }\r\n    if (value < data.minPrice) {\r\n      input\r\n        .closest('.param__details')\r\n        .classList.remove('param__details--error');\r\n      cleaveInput.setRawValue(data.minPrice);\r\n    }\r\n\r\n    //обновить модель\r\n    updateModel(input, {\r\n      cost: +cleaveInput.getRawValue(),\r\n      onUpdate: 'inputCost',\r\n    });\r\n  });\r\n  return cleaveInput;\r\n}\r\n\r\nexport default init;\r\n","import updateModel from './../utils/updateModel.js';\r\n\r\nfunction init(getData) {\r\n  const slider = document.querySelector('#slider-cost');\r\n  const data = getData();\r\n\r\n  noUiSlider.create(slider, {\r\n    start: data.cost,\r\n    connect: 'lower',\r\n    tooltips: true,\r\n    step: 100000,\r\n    range: {\r\n      min: data.minPrice,\r\n      '1%': [400000, 100000],\r\n      '50%': [10000000, 500000],\r\n      max: data.maxPrice,\r\n    },\r\n    format: wNumb({\r\n      decimals: 0,\r\n      thousand: ' ',\r\n      suffix: '',\r\n    }),\r\n  });\r\n\r\n  //следит за событиями slide\r\n  slider.noUiSlider.on('slide', function () {\r\n    //получить значение слайдера\r\n    let sliderValue = slider.noUiSlider.get();\r\n    //избавить от точки и пробелов в консоли\r\n    sliderValue = sliderValue.split('.')[0];\r\n    sliderValue = parseInt(String(sliderValue).replace(/ /g, ''));\r\n\r\n    updateModel(slider, {\r\n      cost: sliderValue,\r\n      onUpdate: 'costSlider',\r\n    });\r\n  });\r\n\r\n  return slider;\r\n}\r\n\r\nexport default init;\r\n","import updateModel from '../utils/updateModel.js';\r\n\r\nfunction init(getData) {\r\n  const input = document.querySelector('#input-downpayment');\r\n\r\n  const settings = {\r\n    numeral: true,\r\n    numeralThousandsGroupStyle: 'thousand',\r\n    delimiter: ' ',\r\n  };\r\n\r\n  const cleaveInput = new Cleave(input, settings);\r\n  //установка стартового значения\r\n  cleaveInput.setRawValue(getData().payment);\r\n\r\n  //прослушка на ввод стоимости\r\n  input.addEventListener('input', function () {\r\n    const value = +cleaveInput.getRawValue();\r\n    console.log(value);\r\n\r\n    //проверка на минимальную и максимальную сумму первого платежа\r\n    if (\r\n      value < getData().getMinPayment() ||\r\n      value > getData().getMaxPayment()\r\n    ) {\r\n      input.closest('.param__details').classList.add('param__details--error');\r\n    }\r\n\r\n    if (\r\n      value >= getData().getMinPayment() &&\r\n      value <= getData().getMaxPayment()\r\n    ) {\r\n      input\r\n        .closest('.param__details')\r\n        .classList.remove('param__details--error');\r\n    }\r\n\r\n    //обновить модель\r\n    updateModel(input, {\r\n      payment: value,\r\n      onUpdate: 'inputPayment',\r\n    });\r\n  });\r\n\r\n  //когда ввели маленькое число будет сбрасываться на минимально допустимое\r\n  input.addEventListener('change', function () {\r\n    const value = +cleaveInput.getRawValue();\r\n\r\n    if (value > getData().getMaxPayment()) {\r\n      input\r\n        .closest('.param__details')\r\n        .classList.remove('param__details--error');\r\n      cleaveInput.setRawValue(getData().getMaxPayment());\r\n    }\r\n\r\n    if (value < getData().getMinPayment()) {\r\n      input\r\n        .closest('.param__details')\r\n        .classList.remove('param__details--error');\r\n      cleaveInput.setRawValue(getData().getMinPayment());\r\n    }\r\n    //обновить модель\r\n    updateModel(input, {\r\n      payment: value,\r\n      onUpdate: 'inputPayment',\r\n    });\r\n  });\r\n  return cleaveInput;\r\n}\r\n\r\nexport default init;\r\n","import updateModel from './../utils/updateModel.js';\r\n\r\nfunction init(getData) {\r\n  const slider = document.querySelector('#slider-downpayment');\r\n\r\n  noUiSlider.create(slider, {\r\n    start: getData().paymentPercents * 100,\r\n    connect: 'lower',\r\n    tooltips: true,\r\n    step: 1,\r\n    range: {\r\n      min: getData().minPaymentPercents * 100,\r\n      max: getData().maxPaymentPercents * 100,\r\n    },\r\n    format: wNumb({\r\n      decimals: 0,\r\n      thousand: ' ',\r\n      suffix: '',\r\n    }),\r\n  });\r\n\r\n  //следит за событиями slide\r\n  slider.noUiSlider.on('slide', function () {\r\n    //получить значение слайдера\r\n    let sliderValue = slider.noUiSlider.get();\r\n    //избавить от точки и пробелов в консоли\r\n    sliderValue = sliderValue.split('.')[0];\r\n    sliderValue = parseInt(String(sliderValue).replace(/ /g, ''));\r\n\r\n    updateModel(slider, {\r\n      paymentPercents: sliderValue,\r\n      onUpdate: 'paymentSlider',\r\n    });\r\n  });\r\n\r\n  return slider;\r\n}\r\n\r\nexport default init;\r\n","import updateModel from './../utils/updateModel.js';\r\n\r\nfunction init(getData) {\r\n  const data = getData();\r\n  //   console.log('FIRED');\r\n  const input = document.querySelector('#input-term');\r\n\r\n  const settings = {\r\n    numeral: true,\r\n    numeralThousandsGroupStyle: 'thousand',\r\n    delimiter: ' ',\r\n  };\r\n\r\n  const cleaveInput = new Cleave(input, settings);\r\n  //установка стартового значения\r\n  cleaveInput.setRawValue(data.time);\r\n\r\n  //прослушка на ввод стоимости\r\n  input.addEventListener('input', function () {\r\n    const value = +cleaveInput.getRawValue();\r\n    console.log(value);\r\n\r\n    //проверка на минимальную и максимальную цену\r\n    if (value < data.minYear || value > data.maxYear) {\r\n      input.closest('.param__details').classList.add('param__details--error');\r\n    }\r\n\r\n    if (value >= data.minYear && value <= data.maxYear) {\r\n      input\r\n        .closest('.param__details')\r\n        .classList.remove('param__details--error');\r\n    }\r\n\r\n    //обновить модель\r\n    updateModel(input, {\r\n      time: value,\r\n      onUpdate: 'inputTime',\r\n    });\r\n  });\r\n\r\n  //когда ввели маленькое число будет сбрасываться на минимально допустимое\r\n  input.addEventListener('change', function () {\r\n    const value = +cleaveInput.getRawValue();\r\n\r\n    if (value > data.maxYear) {\r\n      input\r\n        .closest('.param__details')\r\n        .classList.remove('param__details--error');\r\n      cleaveInput.setRawValue(data.maxYear);\r\n    }\r\n    if (value < data.minYear) {\r\n      input\r\n        .closest('.param__details')\r\n        .classList.remove('param__details--error');\r\n      cleaveInput.setRawValue(data.minYear);\r\n    }\r\n    //обновить модель\r\n    updateModel(input, {\r\n      time: +cleaveInput.getRawValue(),\r\n      onUpdate: 'inputTime',\r\n    });\r\n  });\r\n  return cleaveInput;\r\n}\r\n\r\nexport default init;\r\n","import updateModel from './../utils/updateModel.js';\r\n\r\nfunction init(getData) {\r\n  const slider = document.querySelector('#slider-term');\r\n  const data = getData();\r\n\r\n  noUiSlider.create(slider, {\r\n    start: data.time,\r\n    connect: 'lower',\r\n    tooltips: true,\r\n    step: 1,\r\n    range: {\r\n      min: data.minYear,\r\n      max: data.maxYear,\r\n    },\r\n    format: wNumb({\r\n      decimals: 0,\r\n      thousand: ' ',\r\n      suffix: '',\r\n    }),\r\n  });\r\n\r\n  //следит за событиями slide\r\n  slider.noUiSlider.on('slide', function () {\r\n    //получить значение слайдера\r\n    let sliderValue = slider.noUiSlider.get();\r\n    //избавить от точки и пробелов в консоли\r\n    sliderValue = sliderValue.split('.')[0];\r\n    sliderValue = parseInt(String(sliderValue).replace(/ /g, ''));\r\n\r\n    updateModel(slider, {\r\n      time: sliderValue,\r\n      onUpdate: 'timeSlider',\r\n    });\r\n  });\r\n\r\n  return slider;\r\n}\r\n\r\nexport default init;\r\n","import * as Model from './model.js';\r\nimport updateResultsView from './view/updateResultsView.js';\r\nimport programs from './view/radioPrograms.js';\r\nimport { updateMinPercents } from './view/utils.js';\r\n\r\nimport costInput from './view/costInput.js';\r\nimport costRange from './view/costRange.js';\r\n\r\nimport paymentInput from './view/paymentInput.js';\r\nimport paymentRange from './view/paymentRange.js';\r\n\r\nimport timeInput from './view/timeInput.js';\r\nimport timeRange from './view/timeRange.js';\r\n\r\n//весь код в контроллере будет запускаться, кода всё загружено\r\nwindow.onload = function () {\r\n  const getData = Model.getData;\r\n  //отображение программ на странице(ХХ)\r\n\r\n  //init programs\r\n  programs(getData);\r\n\r\n  //инициализирую запуская costInput\r\n  const cleaveCost = costInput(getData);\r\n  const sliderCost = costRange(getData);\r\n\r\n  //инициализирую запуская paymentInput\r\n  const cleavePayment = paymentInput(getData);\r\n  const sliderPayment = paymentRange(getData);\r\n\r\n  //инициализирую запуская timeInput\r\n  const cleaveTime = timeInput(getData);\r\n  const sliderTime = timeRange(getData);\r\n\r\n  //отслеживать, что генерация идёт (прослушка пользовательского события)\r\n  document.addEventListener('updateForm', (e) => {\r\n    //в модели будет ф-я, которая будет обновлять данные\r\n    Model.setData(e.detail);\r\n\r\n    const data = Model.getData();\r\n    const results = Model.getResults();\r\n\r\n    //Обновить всё, что связано с внешним видом формы, основываясь на данных модели\r\n    updateFormAndSliders(data);\r\n\r\n    //Обновляю блок с результатами\r\n    updateResultsView(results);\r\n  });\r\n\r\n  function updateFormAndSliders(data) {\r\n    //Обновление радиокнопок\r\n    if (data.onUpdate === 'radioProgram') {\r\n      updateMinPercents(data);\r\n\r\n      //update payment slider\r\n      sliderPayment.noUiSlider.updateOptions({\r\n        range: {\r\n          min: data.minPaymentPercents * 100,\r\n          max: data.maxPaymentPercents * 100,\r\n        },\r\n      });\r\n    }\r\n\r\n    //costInput\r\n    if (data.onUpdate !== 'inputCost') {\r\n      cleaveCost.setRawValue(data.cost);\r\n    }\r\n\r\n    //costSlider\r\n    if (data.onUpdate !== 'costSlider') {\r\n      sliderCost.noUiSlider.set(data.cost);\r\n    }\r\n\r\n    //paymentInput\r\n    if (data.onUpdate !== 'inputPayment') {\r\n      cleavePayment.setRawValue(data.payment);\r\n    }\r\n\r\n    //paymentInput\r\n    if (data.onUpdate !== 'paymentSlider') {\r\n      sliderPayment.noUiSlider.set(data.paymentPercents * 100);\r\n    }\r\n\r\n    //обновляю время timeInput\r\n    if (data.onUpdate !== 'inputTime') {\r\n      cleaveTime.setRawValue(data.time);\r\n    }\r\n\r\n\t //timeSlider\r\n\t if (data.onUpdate !== 'timeSlider') {\r\n\t\tsliderTime.noUiSlider.set(data.time);\r\n    }\r\n  }\r\n};\r\n"]}